grid_config:
    'sklearn.ensemble.RandomForestClassifier':
        n_estimators: [150]
        max_depth: [50]
        min_samples_split: [25]
    
    'sklearn.tree.DecisionTreeClassifier':
        max_depth: [3]
        max_features: [1,2,3,4,5]
        min_samples_split: [25]
      
    'triage.component.catwalk.estimators.classifiers.ScaledLogisticRegression':
        C: [0.1]
        penalty: ['l1']
    

    #MADI AND WASEEM - ADD YOUR BASELINE MODELS

    # catwalk's BaselineRankMultiFeature baseline will score based on the ranking
    # by one or more feature (note that the scores don't map to the percentiles as
    # in PercentileRankOneFeature. This provides a slightly more complex baseline
    # than above, but still realistic for what might be encountered in practice.
    # The example below will create two ranker "models": one ranking by two features
    # and the other just by a single feature. Note that the rules are lists of
    # dictionaries.

    # BASELINE 1
    'triage.component.catwalk.baselines.rankers.BaselineRankMultiFeature':
        rules:
            #UPDATE WITH BASELINE FEATURES
            - [{feature: 'feature_1', low_value_high_score: True}, {feature: 'feature_2', low_value_high_score: False}]
            - [{feature: 'feature_3', low_value_high_score: True}]

    # BASLINE 2
    'triage.component.catwalk.baselines.rankers.BaselineRankMultiFeature':
            rules:
                #UPDATE WITH BASELINE FEATURES
                - [{feature: 'feature_1', low_value_high_score: True}, {feature: 'feature_2', low_value_high_score: False}]
                - [{feature: 'feature_3', low_value_high_score: True}]

